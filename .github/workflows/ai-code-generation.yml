name: AI Code Generation

on:
  push:
    paths:
      - 'requirements/*.md'
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      requirement_file:
        description: 'Requirement file to process (optional, will auto-detect if not provided)'
        required: false
        type: string

jobs:
  generate-code:
    name: Generate Code with AI
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      pull-requests: write
      
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4        
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install and Configure Gemini CLI
        run: |
          echo "📦 Installing official Gemini CLI..."
          npm install -g @google/gemini-cli

          echo "🔍 Verifying installation..."
          gemini --version

          echo "🔧 Setting up non-interactive configuration..."
          mkdir -p .gemini

          # Create settings.json for non-interactive mode
          cat > .gemini/settings.json << EOF
          {
            "selectedAuthType": "USE_GEMINI",
            "excludeTools": [],
            "autoConfigureMaxOldSpaceSize": true
          }
          EOF

          echo "🔑 Validating API key..."
          if [[ ! "$GEMINI_API_KEY" =~ ^AIza.* ]]; then
            echo "❌ Invalid API key format"
            exit 1
          fi

          echo "✅ Gemini CLI setup completed"
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

      - name: Validate Environment
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          if [ -z "$GEMINI_API_KEY" ]; then
            echo "❌ GEMINI_API_KEY not found in secrets"
            echo "Please add GEMINI_API_KEY to repository secrets"
            exit 1
          fi

          echo "🔑 Validating API key format..."
          if [[ ! "$GEMINI_API_KEY" =~ ^AIza.* ]]; then
            echo "⚠️ API key format may be invalid (should start with 'AIza')"
          fi

          echo "✅ Environment validation passed"
          
      - name: Process Requirements
        id: process
        run: |
          # Check if requirement file was provided via workflow_dispatch
          if [ -n "${{ github.event.inputs.requirement_file }}" ]; then
            REQUIREMENT_FILE="${{ github.event.inputs.requirement_file }}"
            echo "📄 Using manually specified file: $REQUIREMENT_FILE"
          else
            # Find the most recently changed requirement file
            REQUIREMENT_FILE=$(find requirements -name "*.md" -type f -not -name ".gitkeep" | head -1)
            echo "📄 Auto-detected file: $REQUIREMENT_FILE"
          fi

          if [ -z "$REQUIREMENT_FILE" ] || [ ! -f "$REQUIREMENT_FILE" ]; then
            echo "❌ No valid requirement file found"
            exit 1
          fi
          
          echo "📄 Processing: $REQUIREMENT_FILE"
          echo "requirement_file=$REQUIREMENT_FILE" >> $GITHUB_OUTPUT
          
          # Extract feature name for branch naming
          FEATURE_NAME=$(basename "$REQUIREMENT_FILE" .md)
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          BRANCH_NAME="ai-generated/${FEATURE_NAME}-${TIMESTAMP}"
          
          echo "🌿 Branch name: $BRANCH_NAME"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "feature_name=$FEATURE_NAME" >> $GITHUB_OUTPUT
          
      - name: Generate Code with Gemini CLI
        id: generate
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          echo "🤖 Starting code generation with Gemini CLI..."

          # Read requirement content
          REQUIREMENT_CONTENT=$(cat "${{ steps.process.outputs.requirement_file }}")
          FEATURE_NAME="${{ steps.process.outputs.feature_name }}"

          echo "📝 Processing requirement: $FEATURE_NAME"
          echo "📄 Requirement file: ${{ steps.process.outputs.requirement_file }}"

          # Create output directory
          mkdir -p generated

          # Use Gemini CLI in non-interactive mode
          # The CLI will automatically detect it's in a non-TTY environment
          echo "🤖 Generating code with Gemini CLI..."

          # Create a more specific prompt for code generation
          PROMPT="You are a code generation assistant. Based on the following requirement, you must create actual JavaScript files using the write_file tool.

          REQUIREMENT:
          $REQUIREMENT_CONTENT

          INSTRUCTIONS:
          1. Use the write_file tool to create a JavaScript file named '${FEATURE_NAME}.js'
          2. Implement the solution with proper JSDoc comments
          3. Export the function for use in other modules
          4. Follow modern ES6+ syntax
          5. Include comprehensive error handling
          6. Add unit tests if appropriate

          You MUST use the write_file tool to create actual files. Do not just provide code examples."

          # Method 1: Using stdin with enhanced prompt and YOLO mode
          echo "$PROMPT" | gemini --yolo > "generated/${FEATURE_NAME}_output.txt" 2>&1

          # Check if generation was successful
          if [ $? -eq 0 ]; then
            echo "✅ Code generation completed successfully"
            echo "📄 Gemini CLI output:"
            head -20 "generated/${FEATURE_NAME}_output.txt"
          else
            echo "❌ Code generation failed"
            cat "generated/${FEATURE_NAME}_output.txt"
            exit 1
          fi

          # Store output info for next steps
          echo "output_file=generated/${FEATURE_NAME}_output.txt" >> $GITHUB_OUTPUT
          echo "feature_name=$FEATURE_NAME" >> $GITHUB_OUTPUT

      - name: Process Generated Files
        id: files
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          echo "🔍 Discovering generated files..."

          # Gemini CLI may have created files directly in the workspace
          # Let's find all newly created or modified files
          find . -name "*.js" -o -name "*.py" -o -name "*.java" -o -name "*.ts" -newer .gemini/settings.json 2>/dev/null || true

          # Check if any files were generated in the current directory
          GENERATED_FILES=$(find . -maxdepth 2 -type f \( -name "*.js" -o -name "*.py" -o -name "*.java" -o -name "*.ts" \) -newer .gemini/settings.json 2>/dev/null || echo "")

          if [ -n "$GENERATED_FILES" ]; then
            echo "✅ Generated files found:"
            echo "$GENERATED_FILES"

            # Move generated files to the generated directory
            mkdir -p generated
            for file in $GENERATED_FILES; do
              if [ -f "$file" ] && [[ "$file" != "./generated/"* ]]; then
                echo "📁 Moving $file to generated/"
                mv "$file" "generated/"
              fi
            done

            # List final generated files
            echo "📋 Final generated files:"
            ls -la generated/ || echo "No files in generated directory"

            # Store information for next steps
            echo "has_generated_files=true" >> $GITHUB_OUTPUT
            echo "generated_count=$(ls generated/ | wc -l)" >> $GITHUB_OUTPUT
          else
            echo "⚠️ No generated files found in workspace"
            echo "� Checking Gemini CLI output for code content..."

            # Check if the output contains code that we can extract
            OUTPUT_FILE="generated/${{ steps.generate.outputs.feature_name }}_output.txt"
            if [ -f "$OUTPUT_FILE" ]; then
              echo "📋 Gemini CLI output content:"
              cat "$OUTPUT_FILE"

              # Try to extract JavaScript code from the output
              if grep -q "function\|const\|let\|var\|=>" "$OUTPUT_FILE"; then
                echo "🔍 Found code in output, extracting..."

                # Extract code blocks (simple heuristic)
                sed -n '/```javascript/,/```/p' "$OUTPUT_FILE" | sed '1d;$d' > "generated/${{ steps.generate.outputs.feature_name }}.js" 2>/dev/null || true

                # If no code blocks found, try to extract the whole output as code
                if [ ! -s "generated/${{ steps.generate.outputs.feature_name }}.js" ]; then
                  cp "$OUTPUT_FILE" "generated/${{ steps.generate.outputs.feature_name }}.js"
                fi

                echo "✅ Extracted code to generated/${{ steps.generate.outputs.feature_name }}.js"
                echo "has_generated_files=true" >> $GITHUB_OUTPUT
                echo "generated_count=1" >> $GITHUB_OUTPUT
              else
                echo "❌ No code content found in output"
                echo "has_generated_files=false" >> $GITHUB_OUTPUT
              fi
            else
              echo "❌ No output file found"
              echo "has_generated_files=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Handle Generation Errors
        if: failure()
        run: |
          echo "❌ Gemini CLI execution failed"
          echo "🔍 Debugging information:"
          echo "- Requirement file: ${{ steps.process.outputs.requirement_file }}"
          echo "- Feature name: ${{ steps.process.outputs.feature_name }}"
          echo "- Gemini CLI version: $(gemini --version 2>/dev/null || echo 'Not installed')"
          echo "- API key configured: $([[ -n "$GEMINI_API_KEY" ]] && echo 'Yes' || echo 'No')"
          echo "- Working directory: $(pwd)"
          echo "- .gemini directory exists: $([ -d .gemini ] && echo 'Yes' || echo 'No')"

          # Show Gemini CLI configuration
          echo "📋 Gemini CLI configuration:"
          cat .gemini/settings.json 2>/dev/null || echo "No settings.json found"

          # Show any output files
          echo "📄 Output files:"
          ls -la generated/ 2>/dev/null || echo "No generated directory"

          # Show recent log files if any
          echo "📝 Recent logs:"
          find . -name "*.log" -newer .gemini/settings.json 2>/dev/null | head -5 | xargs cat 2>/dev/null || echo "No log files found"

          # Create issue for failed generation
          gh issue create \
            --title "🤖 Gemini CLI Integration Failed: ${{ steps.process.outputs.feature_name }}" \
            --body "**Workflow Run**: [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

          **Requirement File**: \`${{ steps.process.outputs.requirement_file }}\`

          **Error**: Gemini CLI execution failed. Check workflow logs for detailed debugging information.

          **Next Steps**:
          - Verify API key configuration
          - Check Gemini CLI version compatibility
          - Review requirement file format" \
            --label "bug" \
            --label "gemini-cli" \
            --label "ai-generation"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

      - name: Create Branch and Commit
        run: |
          # Configure Git
          git config user.name "AI Code Generator"
          git config user.email "ai-bot@github-actions.com"

          # Create and switch to new branch
          git checkout -b "${{ steps.process.outputs.branch_name }}"

          # Check if there are any files to commit
          if [ -d "generated" ] && [ "$(ls -A generated 2>/dev/null)" ]; then
            echo "📁 Adding generated files..."
            git add generated/

            # Check if there are actually changes to commit
            if git diff --cached --quiet; then
              echo "⚠️ No changes to commit"
              exit 0
            fi

            # Commit with descriptive message
            git commit -m "🤖 AI Generated: ${{ steps.process.outputs.feature_name }}

          Generated from: ${{ steps.process.outputs.requirement_file }}
          Timestamp: $(date)
          Workflow: ${{ github.workflow }}
          Run ID: ${{ github.run_id }}"

            # Push branch
            git push origin "${{ steps.process.outputs.branch_name }}"

            echo "✅ Successfully pushed generated code to branch: ${{ steps.process.outputs.branch_name }}"
          else
            echo "❌ No generated files found to commit"
            echo "📄 Gemini CLI output was:"
            cat "generated/${{ steps.process.outputs.feature_name }}_output.txt" 2>/dev/null || echo "No output file found"
            exit 1
          fi
          
      - name: Create Pull Request
        if: steps.files.outputs.has_generated_files == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create PR with GitHub CLI
          gh pr create \
            --title "🤖 AI Generated: ${{ steps.process.outputs.feature_name }}" \
            --body "## AI Generated Code

          **Source Requirement**: \`${{ steps.process.outputs.requirement_file }}\`
          **Generated Files**: ${{ steps.files.outputs.generated_count }} file(s) in \`generated/\` directory
          **Workflow Run**: [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

          ### Generated Files
          - \`${{ steps.generate.outputs.output_file }}\`

          ### Review Checklist
          - [ ] Code meets functional requirements
          - [ ] Code follows project conventions
          - [ ] No security vulnerabilities
          - [ ] Ready for integration

          ### Implementation Status
          - [x] Workflow infrastructure complete
          - [ ] **TODO**: Implement Task 03 - Gemini CLI Integration
          - [ ] **TODO**: Replace placeholder code generation with real Gemini CLI

          ---
          *This PR was automatically created by AI Code Generation workflow*

          > ⚠️ **Note**: This PR contains placeholder code. Real AI generation will be implemented in Task 03." \
            --head "${{ steps.process.outputs.branch_name }}" \
            --base main \
            --label "ai-generated" \
            --label "needs-review" \
            --label "todo-task-03"

      # TODO: Task 03 - Implement Error Handling
      # This step handles failures in code generation
      - name: Handle Generation Errors
        if: failure()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "❌ Workflow failed during execution"
          echo "🔍 Debugging information:"
          echo "- Requirement file: ${{ steps.process.outputs.requirement_file }}"
          echo "- Feature name: ${{ steps.process.outputs.feature_name }}"
          echo "- Gemini CLI version: $(gemini --version 2>/dev/null || echo 'Not installed')"
          echo "- Working directory: $(pwd)"
          echo "- Generated directory exists: $([ -d generated ] && echo 'Yes' || echo 'No')"

          # Create issue for failed generation (if we have the necessary info)
          if [ -n "${{ steps.process.outputs.feature_name }}" ]; then
            gh issue create \
              --title "🤖 AI Code Generation Failed: ${{ steps.process.outputs.feature_name }}" \
              --body "**Workflow Run**: [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

              **Requirement File**: \`${{ steps.process.outputs.requirement_file }}\`

              **Error**: Workflow execution failed. Check the workflow logs for detailed error information.

              **Next Steps**:
              - Review workflow logs for specific error details
              - Verify API key configuration
              - Complete Task 03 implementation
              - Test with simpler requirements" \
              --label "bug" \
              --label "ai-generation" \
              --label "workflow-failure"
          fi

      - name: Workflow Summary
        run: |
          echo "## 🎉 Workflow Completed Successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Execution Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Requirement**: ${{ steps.process.outputs.requirement_file }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Feature Name**: ${{ steps.process.outputs.feature_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Generated Files**: ${{ steps.files.outputs.generated_count }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ steps.process.outputs.branch_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **PR Status**: ${{ steps.files.outputs.has_generated_files == 'true' && 'Created' || 'Skipped (no files)' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Complete Task 03 - Gemini CLI Integration" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Replace placeholder code generation with real AI" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Test end-to-end workflow with real requirements" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Files Generated" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          ls -la generated/ >> $GITHUB_STEP_SUMMARY 2>/dev/null || echo "No files generated" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
