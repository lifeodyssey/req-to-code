name: AI Code Generation

on:
  push:
    paths: 
      - 'requirements/*.md'
    branches:
      - main
      - develop

jobs:
  generate-code:
    name: Generate Code with AI
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      pull-requests: write
      
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4        
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      # TODO: Task 03 - Implement Gemini CLI Integration
      # This section will be implemented according to Task 03 design
      - name: Install and Configure Gemini CLI
        run: |
          echo "üì¶ Installing official Gemini CLI..."
          npm install -g @google/gemini-cli

          echo "üîç Verifying installation..."
          gemini --version

          echo "üîß Setting up non-interactive configuration..."
          mkdir -p .gemini

          # Create settings.json for non-interactive mode (Task 03)
          cat > .gemini/settings.json << EOF
          {
            "selectedAuthType": "USE_GEMINI",
            "approvalMode": "YOLO",
            "excludeTools": [],
            "autoConfigureMaxOldSpaceSize": true
          }
          EOF

          echo "‚úÖ Gemini CLI setup completed"

      - name: Validate Environment
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          if [ -z "$GEMINI_API_KEY" ]; then
            echo "‚ùå GEMINI_API_KEY not found in secrets"
            echo "Please add GEMINI_API_KEY to repository secrets"
            exit 1
          fi

          echo "üîë Validating API key format..."
          if [[ ! "$GEMINI_API_KEY" =~ ^AIza.* ]]; then
            echo "‚ö†Ô∏è API key format may be invalid (should start with 'AIza')"
          fi

          echo "‚úÖ Environment validation passed"
          
      - name: Process Requirements
        id: process
        run: |
          # Find the most recently changed requirement file
          REQUIREMENT_FILE=$(find requirements -name "*.md" -type f -not -name ".gitkeep" | head -1)
          
          if [ -z "$REQUIREMENT_FILE" ]; then
            echo "‚ùå No requirement file found"
            exit 1
          fi
          
          echo "üìÑ Processing: $REQUIREMENT_FILE"
          echo "requirement_file=$REQUIREMENT_FILE" >> $GITHUB_OUTPUT
          
          # Extract feature name for branch naming
          FEATURE_NAME=$(basename "$REQUIREMENT_FILE" .md)
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          BRANCH_NAME="ai-generated/${FEATURE_NAME}-${TIMESTAMP}"
          
          echo "üåø Branch name: $BRANCH_NAME"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "feature_name=$FEATURE_NAME" >> $GITHUB_OUTPUT
          
      # TODO: Task 03 - Implement Non-Interactive Code Generation
      # This section implements the Gemini CLI non-interactive mode as designed in Task 03
      - name: Generate Code with Gemini CLI
        id: generate
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          echo "ü§ñ Starting code generation with Gemini CLI..."

          # Read requirement content
          REQUIREMENT_CONTENT=$(cat "${{ steps.process.outputs.requirement_file }}")
          FEATURE_NAME="${{ steps.process.outputs.feature_name }}"

          echo "üìù Processing requirement: $FEATURE_NAME"
          echo "üìÑ Requirement file: ${{ steps.process.outputs.requirement_file }}"

          # Create output directory
          mkdir -p generated

          # TODO: Implement proper Gemini CLI non-interactive mode call
          # Based on Task 03 design, this should use stdin or command line args
          # For now, using a placeholder approach

          echo "‚ö†Ô∏è TODO: Replace with proper Gemini CLI non-interactive call"
          echo "// TODO: Generated by Gemini CLI
          // Requirement: $FEATURE_NAME
          // Source: ${{ steps.process.outputs.requirement_file }}

          function ${FEATURE_NAME}() {
            // TODO: Implement based on requirement
            console.log('Generated code placeholder for: $FEATURE_NAME');
            return 'TODO: Implement functionality';
          }

          module.exports = { ${FEATURE_NAME} };" > "generated/${FEATURE_NAME}.js"

          echo "‚úÖ Code generation completed (placeholder)"
          echo "output_file=generated/${FEATURE_NAME}.js" >> $GITHUB_OUTPUT

      # TODO: Task 03 - Implement File Discovery and Validation
      # This step will discover files created by Gemini CLI and organize them
      - name: Process Generated Files
        id: files
        run: |
          echo "üîç Discovering generated files..."

          # TODO: Implement proper file discovery as per Task 03
          # For now, just verify our placeholder file exists

          if [ -f "generated/${{ steps.generate.outputs.output_file }}" ]; then
            echo "‚úÖ Generated file found: ${{ steps.generate.outputs.output_file }}"
            echo "üìä File size: $(wc -c < "${{ steps.generate.outputs.output_file }}") bytes"
            echo "has_generated_files=true" >> $GITHUB_OUTPUT
            echo "generated_count=1" >> $GITHUB_OUTPUT
          else
            echo "‚ùå No generated files found"
            echo "has_generated_files=false" >> $GITHUB_OUTPUT
            echo "generated_count=0" >> $GITHUB_OUTPUT
          fi

          # List all files in generated directory
          echo "üìã Generated directory contents:"
          ls -la generated/ || echo "Generated directory is empty"

      - name: Create Branch and Commit
        run: |
          # Configure Git
          git config user.name "AI Code Generator"
          git config user.email "ai-bot@github-actions.com"
          
          # Create and switch to new branch
          git checkout -b "${{ steps.process.outputs.branch_name }}"
          
          # Add generated files
          git add generated/
          
          # Commit with descriptive message
          git commit -m "ü§ñ AI Generated: ${{ steps.process.outputs.feature_name }}

          Generated from: ${{ steps.process.outputs.requirement_file }}
          Timestamp: $(date)
          Workflow: ${{ github.workflow }}
          Run ID: ${{ github.run_id }}"
          
          # Push branch
          git push origin "${{ steps.process.outputs.branch_name }}"
          
      - name: Create Pull Request
        if: steps.files.outputs.has_generated_files == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create PR with GitHub CLI
          gh pr create \
            --title "ü§ñ AI Generated: ${{ steps.process.outputs.feature_name }}" \
            --body "## AI Generated Code

          **Source Requirement**: \`${{ steps.process.outputs.requirement_file }}\`
          **Generated Files**: ${{ steps.files.outputs.generated_count }} file(s) in \`generated/\` directory
          **Workflow Run**: [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

          ### Generated Files
          - \`${{ steps.generate.outputs.output_file }}\`

          ### Review Checklist
          - [ ] Code meets functional requirements
          - [ ] Code follows project conventions
          - [ ] No security vulnerabilities
          - [ ] Ready for integration

          ### Implementation Status
          - [x] Workflow infrastructure complete
          - [ ] **TODO**: Implement Task 03 - Gemini CLI Integration
          - [ ] **TODO**: Replace placeholder code generation with real Gemini CLI

          ---
          *This PR was automatically created by AI Code Generation workflow*

          > ‚ö†Ô∏è **Note**: This PR contains placeholder code. Real AI generation will be implemented in Task 03." \
            --head "${{ steps.process.outputs.branch_name }}" \
            --base main \
            --label "ai-generated" \
            --label "needs-review" \
            --label "todo-task-03"

      # TODO: Task 03 - Implement Error Handling
      # This step handles failures in code generation
      - name: Handle Generation Errors
        if: failure()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "‚ùå Workflow failed during execution"
          echo "üîç Debugging information:"
          echo "- Requirement file: ${{ steps.process.outputs.requirement_file }}"
          echo "- Feature name: ${{ steps.process.outputs.feature_name }}"
          echo "- Gemini CLI version: $(gemini --version 2>/dev/null || echo 'Not installed')"
          echo "- Working directory: $(pwd)"
          echo "- Generated directory exists: $([ -d generated ] && echo 'Yes' || echo 'No')"

          # Create issue for failed generation (if we have the necessary info)
          if [ -n "${{ steps.process.outputs.feature_name }}" ]; then
            gh issue create \
              --title "ü§ñ AI Code Generation Failed: ${{ steps.process.outputs.feature_name }}" \
              --body "**Workflow Run**: [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

              **Requirement File**: \`${{ steps.process.outputs.requirement_file }}\`

              **Error**: Workflow execution failed. Check the workflow logs for detailed error information.

              **Next Steps**:
              - Review workflow logs for specific error details
              - Verify API key configuration
              - Complete Task 03 implementation
              - Test with simpler requirements" \
              --label "bug" \
              --label "ai-generation" \
              --label "workflow-failure"
          fi

      - name: Workflow Summary
        run: |
          echo "## üéâ Workflow Completed Successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Execution Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Requirement**: ${{ steps.process.outputs.requirement_file }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Feature Name**: ${{ steps.process.outputs.feature_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Generated Files**: ${{ steps.files.outputs.generated_count }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ steps.process.outputs.branch_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **PR Status**: ${{ steps.files.outputs.has_generated_files == 'true' && 'Created' || 'Skipped (no files)' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Complete Task 03 - Gemini CLI Integration" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Replace placeholder code generation with real AI" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Test end-to-end workflow with real requirements" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Files Generated" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          ls -la generated/ >> $GITHUB_STEP_SUMMARY 2>/dev/null || echo "No files generated" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
